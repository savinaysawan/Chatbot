# -*- coding: utf-8 -*-
"""RuleBased_chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1httN_bbIPcewWQOTz3Co8VDqNaVH11ik
"""



"""### Import required Library"""

import re
import random as ra

"""## #write code"""

class RuleBot:
    # Negative responses
    neg_res=("no","nope","nah","not a chance "," sorry","quite","pause","goodbye","bye","thanks")

    # Starter Question
    random_ques=("How May I Help You ! :","Hey I'm Here to Help you :","kindly put your Query :")
    random_ques_2=("Can you put your query again .\n","I am Trying to help you need some more info \n")

    def __init__(self):
        self.basic_query={
                  'Admission_Related_Query': r'.*\s*admission*',
                  'Holday_Related_Query':r'.*\s*holiday*',
                  'Fees_Related_Query':r'.*\s*fees*',
                  'Course_Related_Query':r'.*\s*course*',
                  'Admission_Related_Query1':r'.*\s*Admission_Related_Query1*'} # Basic Query Details

        self.couse_data={
                  'B.Tech': r'.*\s*btec *',
                  'M.Tech':r'.*\s*mtech *',
                  'BCA':r'.*\s*bca *',
                  'MCA':r'.*\s*mca *'}   # All Course Name
        self.branch_data={
                  'CSE': r'.*\s*cse *',
                  'civil':r'.*\s*civil *',
                  'Mechanical':r'.*\s*mechanical *',
                  'ECE':r'.*\s*ece *',
                  'EEE':r'.*\s*eee *'}   # All Course Name
        self.holiday_list={'Republic Day':'26-Jan',
                            'Holi':'25-Mar',
                            'Good Friday':'29-Mar',
                            'Id-ul-Fitr':'11-Apr',
                            'Ram Navmi':'17-Apr',
                            'Mahavir Jayanti':'21-Apr',
                            'Buddha Purnima':'23-May',
                            'Id-ul-Zuha (Bakrid)':'17-Jun',
                            'Muharram':'17-Jul',
                            'Independence Day / Parsi New Year’s Day / Nauraj':'15-Aug',
                            'Janamashtami (Vaishnva)':'26-Aug',
                            'Milad-un-Nabi or Id-e-Milad (Birthday of Prophet Mohammad)':'16-Sep',
                            'Mahatma Gandhi’s Birthday':'2-Oct',
                            'Dussehra':'12-Oct',
                            'Diwali':'31-Oct',
                            'Guru Nanak’s Birthday':'15-Nov',
                            'Christmas':'25-Dec'
                            }
######################################################################################
#                     Admission Related query                                        #
#                                                                                    #
######################################################################################
# Admission Related Query function
    def Admission_Related_Query(self):
        self.course_inp=input("Enter the course you wanted to take admission : ").lower()
        self.course_inp_without_dot = self.course_inp.replace(".", "") # Replace . from String
        for key,value in self.couse_data.items():
            course_data_intent=key
            course_data_regex_pattern=value
            found_match_course=re.match(course_data_regex_pattern, self.course_inp_without_dot)
            if found_match_course:
                if course_data_intent=='B.Tech': # If user Enter B.Tech then this condition will execute
                    self.btech_admission()
                elif course_data_intent=='M.Tech': # If user Enter M.Tech then this condition will execute
                    self.mtech_admission()
                elif course_data_intent=='BCA': # If user Enter BCA then this condition will execute
                    print("For BCA we have Total 60 Seats\n remaining and Fees deatls are Below \n")
                    self.bca_fees()
                    self.help_again()
                else: # By default last case course_data_intent=='MCA': # If user Enter MCA then this condition will execute
                    print("For MCA Branch we have Total 60 Seats remaining and Fees deatls are Below ")
                    self.mca_fees()
                    self.help_again()
        if not found_match_course:
            print("!!!!we are unable to process your query !!!!")
            self.help_again()

# Btech Admission Related query
    def btech_admission(self):
        self.branch_inp=input(" Enter the Brach you wanted to take admission : ").lower()
        self.branch_inp_without_dot = self.branch_inp.replace(".", "") # Replace . from String
        for key,value in self.branch_data.items():
            branch_data_intent=key
            branch_data_regex_pattern=value
            found_match_branch=re.match(branch_data_regex_pattern, self.branch_inp_without_dot)
            # B.Tech Branchwise Details completed
            if found_match_branch:
                if branch_data_intent=='CSE':
                    print("\nFor CSE Branch we have Total 60 Seats remaining\n          Fees deatls \n")
                    self.cse_fees()
                    self.help_again()
                elif branch_data_intent=='civil':
                    print("\nFor civil Branch we have Total 60 Seats remaining\n        Fees deatls \n")
                    self.civil_fees()
                    self.help_again()
                elif branch_data_intent=='ECE':
                    print("\nFor ECE Branch we have Total 60 Seats remaining\n           Fees deatls \n")
                    self.cse_fees()
                    self.help_again()
                elif branch_data_intent=='Mechanical':
                    print("\nFor Mechanical Branch we have Total 60 Seats remaining\n     Fees deatls \n")
                    self.mechanical_fees()
                    self.help_again()
                else: # By default this condition branch_data_intent=='EEE':
                    print("\nFor EEE Branch we have Total 60 Seats remaining\n           Fees deatls \n")
                    self.eee_fees()
                    self.help_again()
        if not found_match_branch:
            print(" we are not offering the branch that you inserted \n ")
            self.help_again()
 #  M.Tech Related Admission Related Query

    def mtech_admission(self):
        self.branch_inp_mtech=input(" Enter the Brach you wanted to take admission : ").lower()
        self.branch_inp_mtech_without_dot = self.branch_inp_mtech.replace(".", "") # Replace . from String
        for key,value in self.branch_data.items():
            self.branch_key_mtech=key
            self.branch_val_mtech=value
            found_mtech_branch=re.match(self.branch_val_mtech, self.branch_inp_mtech_without_dot)
            if found_mtech_branch:
                if self.branch_key_mtech=='CSE':
                    print("\nFor CSE Branch we have Total 60 Seats remaining\n              Fees deatls \n")
                    self.cse_fees_mtech()
                    self.help_again()
                elif self.branch_key_mtech=='civil':
                    print("\nFor civil Branch we have Total 60 Seats remaining\n            Fees deatls \n")
                    self.civil_fees_mtech()
                    self.help_again()
                elif self.branch_key_mtech=='ECE':
                    print("\nFor ECE Branch we have Total 60 Seats remaining\n              Fees deatls \n")
                    self.ece_fees_mtech()
                    self.help_again()
                elif self.branch_key_mtech=='Mechanical':
                    print("\nFor Mechanical Branch we have Total 60 Seats remaining\n       Fees deatls \n")
                    self.mechanical_fees_mtech()
                    self.help_again()
                else: # By default this condition  self.branch_key_mtech=='EEE':
                    print("\nFor EEE Branch we have Total 60 Seats remaining\n              Fees deatls \n")
                    self.eee_fees_mtech()
                    self.help_again()
        if not found_mtech_branch:
            print(" we are not offering the branch that you inserted \n ")
            self.help_again()

#########################################################################################
#               FEES DETAILS                                                            #
#########################################################################################

# Btech Details
# Fees Details of all Brachwise
    def cse_fees(self):
        print("Fees for CSE 1st Year : 2,00,000\nFees for CSE 2nd Year : 2,00,000\nFees for CSE 3rd Year : 2,00,000\nFees for CSE 4th Year : 2,00,000\n")

    def civil_fees(self):
        print("Fees for civil 1st Year : 1,90,000\nFees for civil 2nd Year : 1,90,000\nFees for civil 3rd Year : 1,90,000\nFees for civil 4th Year : 1,90,000\n")


    def mechanical_fees(self):
        print("Fees for Mechanical 1st Year : 1,40,000\nFees for Mechanical 2nd Year : 1,40,000\nFees for Mechanical 3rd Year : 1,40,000\nFees for Mechanical 4th Year : 1,40,000\n")


    def ece_fees(self):
        print("Fees for ECE 1st Year : 1,60,000\nFees for ECE 2nd Year : 1,60,000\nFees for ECE 3rd Year : 1,60,000\nFees for ECE 4th Year : 1,50,000\n")


    def eee_fees(self):
        print("Fees for EEE 1st Year : 1,70,000\nFees for EEE 2nd Year : 1,70,000\nFees for EEE 3rd Year : 1,70,000\nFees for EEE 4th Year : 1,60,000\n")


    def bca_fees(self):
        print("Fees for BCA 1st Year : 70,000\nFees for BCA 2nd Year : 70,000\nFees for BCA 3rd Year : 70,000\n")


    def mca_fees(self):
        print("Fees for MCA 1st Year : 1,50,000\nFees for MCA 2nd Year : 1,30,000\n")



# Fees Details of all Mtech Branches

    def cse_fees_mtech(self):
        print("Fees for CSE 1st Year : 1,60,000\nFees for CSE 2nd Year : 1,60,000\n")

    def civil_fees_mtech(self):
        print("Fees for civil 1st Year : 1,50,000\nFees for civil 2nd Year : 1,50,000\n")


    def mechanical_fees_mtech(self):
        print("Fees for Mechanical 1st Year : 1,40,000\nFees for Mechanical 2nd Year : 1,40,000\n")


    def ece_fees_mtech(self):
        print("Fees for ECE 1st Year : 1,50,000\nFees for ECE 2nd Year : 1,50,000\n")


    def eee_fees_mtech(self):
        print("Fees for EEE 1st Year : 1,45,000\nFees for EEE 2nd Year : 1,45,000\n")

# Starts with welcome_greet function
    def welcome_greet(self):
        self.name=input(" Enter Your Name :")
        will_help=input(f"Hi {self.name}, I am Rule Based ChatBot .\nHow may i help you \n").lower()
        if will_help in self.neg_res:
            print("Thank you !! We will meet again ")
            return
        self.basic_query_fun(will_help)  # start chatting from this function

# Fees Related query
    def Fees_Related_Query(self):
        print("For Btech Branchwise Fees are Below :")
        self.cse_fees()
        self.civil_fees()
        self.mechanical_fees()
        self.ece_fees()
        self.eee_fees()
        print("\n\nFor Mtech Branchwise Fees are Below :")
        self.cse_fees_mtech()
        self.civil_fees_mtech()
        self.mechanical_fees_mtech()
        self.ece_fees_mtech()
        self.eee_fees_mtech()
        print("\n\nFor Computer Application Fees are Below :")
        self.bca_fees()
        self.mca_fees()
        self.help_again()

##########################################################################################
#                                                                                        #
#                          Holiday Related Query                                         #
#                                                                                        #
##########################################################################################

# Holiday Display Function .
    def Holday_Related_Query(self):
        for holiday_name,holiday_date in self.holiday_list.items():
            print(holiday_name,"  ===>  ", holiday_date)
        self.help_again()

##########################################################################################
#                                                                                        #
#                          Course  Related Query                                         #
#                                                                                        #
##########################################################################################

    def Course_Related_Query(self):
      print(" We offer Below Courses ")
      print("            Btech Brances Offered ")
      print("  CSE , Civil , Mechenical , ECE, EEE ")
      print("            M.Tech Brances Offered ")
      print("  CSE , Civil , Mechenical , ECE, EEE ")
      print("MCA two Years Course")
      print("BCA three Years Course")
      print(" Fees Mentioned Below ")
      self.Fees_Related_Query()
# Creating basic_query_fun function to proceed the conversion

# Calling function Based on need

    def basic_query_fun(self,start):
        for key,value in self.basic_query.items():
            intent=key
            regex_pattern=value
            found_match=re.match(regex_pattern, start)
            if found_match:
                if intent=='Admission_Related_Query':
                     self.Admission_Related_Query()
                elif intent=='Holday_Related_Query':
                     self.Holday_Related_Query()
                elif intent=='Fees_Related_Query':
                     self.Fees_Related_Query()
                else: # last condition . no need  intent=='Course_Related_Query':
                     self.Course_Related_Query()

        if not found_match:
            data_inp=input(ra.choice(self.random_ques_2)).lower()
            self.help_again()
# Help again query
    def help_again(self):
        self.help_again_inp=input(f"Hi,{self.name} May I help you again with something else:\n").lower()
        counter=0
        if self.help_again_inp in self.neg_res:
            counter=counter+1
        if counter !=0:
            print("Thank you !! ")
        else:
            self.basic_query_fun(self.help_again_inp)  # start chatting from this function basic_query_fun

# Create Object and call welocme_greet function
obj=RuleBot()
obj.welcome_greet()